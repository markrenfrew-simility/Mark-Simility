{
    "contents" : "#proof of concecpt script for decision trees\n\n\n#install.packages(\"XML\")\n#install.packages(\"party\")\nlibrary(XML)\nlibrary(party)\n\n#read our dataset\nContributorSet = read.csv(\"C:\\\\Users\\\\Mark\\\\Documents\\\\Simility\\\\HIgh Risk Contributions.csv\");\nnsamples = nrow(ContributorSet)\n\n#train our trees on the first tenth of the data\ntsize = floor(nsamples/10)\nTrainingset = ContributorSet[1:tsize,]\n\n#test the tree's prediction using the other 9/10ths of the data\nTestSet = ContributorSet[tsize+1:nsamples,]\n\n#read the rules XML file\nxmlfilename = \"C:\\\\Users\\\\Mark\\\\Documents\\\\Simility\\\\default-v1056792.xml\"\n\nxmldoc <- xmlParse(xmlfilename)\nrules <- getNodeSet(xmldoc,\"/policy/rules/rule\")\nnrules <- length(rules)\n\nnrule = 1 #debug\n#for(i in 1:nrules){\n  rule <- rules[[i]]\n  attrs <- xmlAttrs(rule)\n  #if(attrs[[\"active\"]]){ #if it's not active, don't worry about it\n  \n  if(TRUE){ #debug\n    descr <- rule[[\"description\"]]\n    parameters <- rule[[\"parameters\"]]\n    lt <- parameters[[\"LogicType\"]]\n    ltstr <- xmlValue(lt)\n    if(ltstr == \"AND\" || ltstr == \"OR\"){ #let's only worry about Boolean conditions right now\n      #iterate over all the attributes and create the Boolean string \n      \n      #boolean string is of the form attribute_n operation_n value_n lt attribute_n+1 operation_n+1 value_n+1\n      \n      eqnsize <- (xmlSize(parameters)-1)/3 #1 logic type + one of more sets of (attribute, operation, value) \n      \n      eqnstr <- \"\";\n      \n      ctr_form_str <- \"Fraud. ~\" #our formula string to train our ctree\n      \n      for(j in 1:eqnsize){\n        #get the attribute\n        attrstr <- xmlValue(parameters[[paste(\"Attribute\",j,sep=\"\")]])\n        \n        #get the operation\n        operstr <- xmlValue(parameters[[paste(\"Operation\",j,sep=\"\")]])\n        \n        #get the value\n        valstr <- xmlValue(parameters[[paste(\"Value\",j,sep=\"\")]])\n        \n        #alter the strings\n        if(operstr ==\"equal-to\"){\n          operstr <- \"=\"\n        } else if(operstr ==\"not-equal-to\"){\n          operstr <- \"!=\"  \n        } else if(operstr ==\"greater-than\"){\n          operstr <- \">\"  \n        } else if(operstr ==\"greater-than-or-equal-to\"){\n          operstr <- \">=\"  \n        } else if(operstr ==\"less-than\"){\n          operstr <- \"<\"  \n        } else if(operstr ==\"less-than-or-equal-to\"){\n          operstr <- \"<=\"  \n        } else if(operstr ==\"is_present\"){\n          operstr <- \"!=\"\n          valstr <= \"\"\n        } else if(operstr ==\"is_absent\"){\n          operstr <- \"==\"\n          valstr <= \"\"\n        } else if(operstr ==\"contains\"){\n          #this will have to be implemented somehow with a call to grep(). I'll probably have to strip out {} characters first.\n        }        \n        \n        if(attrstr == \"tmx_summary_reason_code\"){\n          newstr <- \"TMX.Summary.Reason.Code\" #kludgey way to go between the different versions of these strings in the XML file and the ContributorSet dataset. I shouldn't need to worry about this for long because we'll be reading from a databse instead.\n        }  \n        if(!grepl(newstr,ctr_form_str)){ #don't add variables more than once\n          ctr_form_str <- paste(ctr_form_str, newstr)  \n        }\n      }\n      \n      #build the simpler formula for training the ctree\n      \n      if(j < eqnsize){\n        eqnstr <- paste(eqnstr, attrstr, operstr, valstr, ltstr)\n        ctr_form_str <- paste(ctr_form_str, \"+\")\n      } else{\n        eqnstr <- paste(eqnstr, attrstr, operstr, valstr)\n      }\n      \n      \n    }\n    \n    #build the ctree\n    test_ctree <- ctree(formula(ctr_form_str),data=Trainingset) \n    \n    #look at the structure of the tree\n    plot(test_ctree)\n    \n    prediction <- predict(test_ctree,TestSet)\n    \n    #look at the table. It will be of the form:\n    \n    #prediction    G    N    Y\n    #         G 1359  710  388\n    #         N    0    0    0\n    #         Y    6   16   58\n    table(prediction, TestSet$Fraud)\n  }\n#}\n\n\n",
    "created" : 1420051183126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1841375826",
    "id" : "4541A382",
    "lastKnownWriteTime" : 1420052914,
    "path" : "~/Simility/CTree_Autobuild/CTree_Autobuild.R",
    "project_path" : "CTree_Autobuild.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}